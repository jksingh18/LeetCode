[
  {
    "id": 1,
    "title": "Two Sum",
    "title_slug": "two-sum",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Hash Table"
    ]
  },
  {
    "id": 124,
    "title": "Binary Tree Maximum Path Sum",
    "title_slug": "binary-tree-maximum-path-sum",
    "difficulty": "Hard",
    "skills": [
      "Binary Tree",
      "Depth-First Search",
      "Dynamic Programming",
      "Tree"
    ]
  },
  {
    "id": 130,
    "title": "Surrounded Regions",
    "title_slug": "surrounded-regions",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Breadth-First Search",
      "Depth-First Search",
      "Matrix",
      "Union Find"
    ]
  },
  {
    "id": 200,
    "title": "Number of Islands",
    "title_slug": "number-of-islands",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Breadth-First Search",
      "Depth-First Search",
      "Matrix",
      "Union Find"
    ]
  },
  {
    "id": 206,
    "title": "Reverse Linked List",
    "title_slug": "reverse-linked-list",
    "difficulty": "Easy",
    "skills": [
      "Linked List",
      "Recursion"
    ]
  },
  {
    "id": 232,
    "title": "Implement Queue using Stacks",
    "title_slug": "implement-queue-using-stacks",
    "difficulty": "Easy",
    "skills": [
      "Design",
      "Queue",
      "Stack"
    ]
  },
  {
    "id": 234,
    "title": "Palindrome Linked List",
    "title_slug": "palindrome-linked-list",
    "difficulty": "Easy",
    "skills": [
      "Linked List",
      "Recursion",
      "Stack",
      "Two Pointers"
    ]
  },
  {
    "id": 494,
    "title": "Target Sum",
    "title_slug": "target-sum",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Backtracking",
      "Dynamic Programming"
    ]
  },
  {
    "id": 637,
    "title": "Average of Levels in Binary Tree",
    "title_slug": "average-of-levels-in-binary-tree",
    "difficulty": "Easy",
    "skills": [
      "Binary Tree",
      "Breadth-First Search",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 684,
    "title": "Redundant Connection",
    "title_slug": "redundant-connection",
    "difficulty": "Medium",
    "skills": [
      "Breadth-First Search",
      "Depth-First Search",
      "Graph",
      "Union Find"
    ]
  },
  {
    "id": 733,
    "title": "Flood Fill",
    "title_slug": "flood-fill",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Breadth-First Search",
      "Depth-First Search",
      "Matrix"
    ]
  },
  {
    "id": 802,
    "title": "Find Eventual Safe States",
    "title_slug": "find-eventual-safe-states",
    "difficulty": "Medium",
    "skills": [
      "Breadth-First Search",
      "Depth-First Search",
      "Graph",
      "Topological Sort"
    ]
  },
  {
    "id": 827,
    "title": "Making A Large Island",
    "title_slug": "making-a-large-island",
    "difficulty": "Hard",
    "skills": [
      "Array",
      "Breadth-First Search",
      "Depth-First Search",
      "Matrix",
      "Union Find"
    ]
  },
  {
    "id": 872,
    "title": "Leaf-Similar Trees",
    "title_slug": "leaf-similar-trees",
    "difficulty": "Easy",
    "skills": [
      "Binary Tree",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 938,
    "title": "Range Sum of BST",
    "title_slug": "range-sum-of-bst",
    "difficulty": "Easy",
    "skills": [
      "Binary Search Tree",
      "Binary Tree",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 944,
    "title": "Delete Columns to Make Sorted",
    "title_slug": "delete-columns-to-make-sorted",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "String"
    ]
  },
  {
    "id": 994,
    "title": "Rotting Oranges",
    "title_slug": "rotting-oranges",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Breadth-First Search",
      "Matrix"
    ]
  },
  {
    "id": 1020,
    "title": "Number of Enclaves",
    "title_slug": "number-of-enclaves",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Breadth-First Search",
      "Depth-First Search",
      "Matrix",
      "Union Find"
    ]
  },
  {
    "id": 1026,
    "title": "Maximum Difference Between Node and Ancestor",
    "title_slug": "maximum-difference-between-node-and-ancestor",
    "difficulty": "Medium",
    "skills": [
      "Binary Tree",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 1071,
    "title": "Greatest Common Divisor of Strings",
    "title_slug": "greatest-common-divisor-of-strings",
    "difficulty": "Easy",
    "skills": [
      "Math",
      "String"
    ]
  },
  {
    "id": 1114,
    "title": "Print in Order",
    "title_slug": "print-in-order",
    "difficulty": "Easy",
    "skills": [
      "Concurrency"
    ]
  },
  {
    "id": 1115,
    "title": "Print FooBar Alternately",
    "title_slug": "print-foobar-alternately",
    "difficulty": "Medium",
    "skills": [
      "Concurrency"
    ]
  },
  {
    "id": 1116,
    "title": "Print Zero Even Odd",
    "title_slug": "print-zero-even-odd",
    "difficulty": "Medium",
    "skills": [
      "Concurrency"
    ]
  },
  {
    "id": 1143,
    "title": "Longest Common Subsequence",
    "title_slug": "longest-common-subsequence",
    "difficulty": "Medium",
    "skills": [
      "Dynamic Programming",
      "String"
    ]
  },
  {
    "id": 1267,
    "title": "Count Servers that Communicate",
    "title_slug": "count-servers-that-communicate",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Breadth-First Search",
      "Counting",
      "Depth-First Search",
      "Matrix",
      "Union Find"
    ]
  },
  {
    "id": 1422,
    "title": "Maximum Score After Splitting a String",
    "title_slug": "maximum-score-after-splitting-a-string",
    "difficulty": "Easy",
    "skills": [
      "Prefix Sum",
      "String"
    ]
  },
  {
    "id": 1448,
    "title": "Count Good Nodes in Binary Tree",
    "title_slug": "count-good-nodes-in-binary-tree",
    "difficulty": "Medium",
    "skills": [
      "Binary Tree",
      "Breadth-First Search",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 1462,
    "title": "Course Schedule IV",
    "title_slug": "course-schedule-iv",
    "difficulty": "Medium",
    "skills": [
      "Breadth-First Search",
      "Depth-First Search",
      "Graph",
      "Topological Sort"
    ]
  },
  {
    "id": 1475,
    "title": "Final Prices With a Special Discount in a Shop",
    "title_slug": "final-prices-with-a-special-discount-in-a-shop",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Monotonic Stack",
      "Stack"
    ]
  },
  {
    "id": 1752,
    "title": "Check if Array Is Sorted and Rotated",
    "title_slug": "check-if-array-is-sorted-and-rotated",
    "difficulty": "Easy",
    "skills": [
      "Array"
    ]
  },
  {
    "id": 1765,
    "title": "Map of Highest Peak",
    "title_slug": "map-of-highest-peak",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Breadth-First Search",
      "Matrix"
    ]
  },
  {
    "id": 1769,
    "title": "Minimum Number of Operations to Move All Balls to Each Box",
    "title_slug": "minimum-number-of-operations-to-move-all-balls-to-each-box",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Prefix Sum",
      "String"
    ]
  },
  {
    "id": 1792,
    "title": "Maximum Average Pass Ratio",
    "title_slug": "maximum-average-pass-ratio",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Greedy",
      "Heap (Priority Queue)"
    ]
  },
  {
    "id": 1930,
    "title": "Unique Length-3 Palindromic Subsequences",
    "title_slug": "unique-length-3-palindromic-subsequences",
    "difficulty": "Medium",
    "skills": [
      "Bit Manipulation",
      "Hash Table",
      "Prefix Sum",
      "String"
    ]
  },
  {
    "id": 2127,
    "title": "Maximum Employees to Be Invited to a Meeting",
    "title_slug": "maximum-employees-to-be-invited-to-a-meeting",
    "difficulty": "Hard",
    "skills": [
      "Depth-First Search",
      "Graph",
      "Topological Sort"
    ]
  },
  {
    "id": 2182,
    "title": "Construct String With Repeat Limit",
    "title_slug": "construct-string-with-repeat-limit",
    "difficulty": "Medium",
    "skills": [
      "Counting",
      "Greedy",
      "Hash Table",
      "Heap (Priority Queue)",
      "String"
    ]
  },
  {
    "id": 2270,
    "title": "Number of Ways to Split Array",
    "title_slug": "number-of-ways-to-split-array",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Prefix Sum"
    ]
  },
  {
    "id": 2337,
    "title": "Move Pieces to Obtain a String",
    "title_slug": "move-pieces-to-obtain-a-string",
    "difficulty": "Medium",
    "skills": [
      "String",
      "Two Pointers"
    ]
  },
  {
    "id": 2381,
    "title": "Shifting Letters II",
    "title_slug": "shifting-letters-ii",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Prefix Sum",
      "String"
    ]
  },
  {
    "id": 2415,
    "title": "Reverse Odd Levels of Binary Tree",
    "title_slug": "reverse-odd-levels-of-binary-tree",
    "difficulty": "Medium",
    "skills": [
      "Binary Tree",
      "Breadth-First Search",
      "Depth-First Search",
      "Tree"
    ]
  },
  {
    "id": 2493,
    "title": "Divide Nodes Into the Maximum Number of Groups",
    "title_slug": "divide-nodes-into-the-maximum-number-of-groups",
    "difficulty": "Hard",
    "skills": [
      "Breadth-First Search",
      "Graph",
      "Union Find"
    ]
  },
  {
    "id": 2558,
    "title": "Take Gifts From the Richest Pile",
    "title_slug": "take-gifts-from-the-richest-pile",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Heap (Priority Queue)",
      "Simulation"
    ]
  },
  {
    "id": 2559,
    "title": "Count Vowel Strings in Ranges",
    "title_slug": "count-vowel-strings-in-ranges",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Prefix Sum",
      "String"
    ]
  },
  {
    "id": 2593,
    "title": "Find Score of an Array After Marking All Elements",
    "title_slug": "find-score-of-an-array-after-marking-all-elements",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Hash Table",
      "Heap (Priority Queue)",
      "Simulation",
      "Sorting"
    ]
  },
  {
    "id": 2658,
    "title": "Maximum Number of Fish in a Grid",
    "title_slug": "maximum-number-of-fish-in-a-grid",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Breadth-First Search",
      "Depth-First Search",
      "Matrix",
      "Union Find"
    ]
  },
  {
    "id": 2762,
    "title": "Continuous Subarrays",
    "title_slug": "continuous-subarrays",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Heap (Priority Queue)",
      "Monotonic Queue",
      "Ordered Set",
      "Queue",
      "Sliding Window"
    ]
  },
  {
    "id": 2779,
    "title": "Maximum Beauty of an Array After Applying Operation",
    "title_slug": "maximum-beauty-of-an-array-after-applying-operation",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Binary Search",
      "Sliding Window",
      "Sorting"
    ]
  },
  {
    "id": 2948,
    "title": "Make Lexicographically Smallest Array by Swapping Elements",
    "title_slug": "make-lexicographically-smallest-array-by-swapping-elements",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Sorting",
      "Union Find"
    ]
  },
  {
    "id": 2981,
    "title": "Find Longest Special Substring That Occurs Thrice I",
    "title_slug": "find-longest-special-substring-that-occurs-thrice-i",
    "difficulty": "Medium",
    "skills": [
      "Binary Search",
      "Counting",
      "Hash Table",
      "Sliding Window",
      "String"
    ]
  },
  {
    "id": 3151,
    "title": "Special Array I",
    "title_slug": "special-array-i",
    "difficulty": "Easy",
    "skills": [
      "Array"
    ]
  },
  {
    "id": 3152,
    "title": "Special Array II",
    "title_slug": "special-array-ii",
    "difficulty": "Medium",
    "skills": [
      "Array",
      "Binary Search",
      "Prefix Sum"
    ]
  },
  {
    "id": 3264,
    "title": "Final Array State After K Multiplication Operations I",
    "title_slug": "final-array-state-after-k-multiplication-operations-i",
    "difficulty": "Easy",
    "skills": [
      "Array",
      "Heap (Priority Queue)",
      "Math",
      "Simulation"
    ]
  },
  {
    "id": 3407,
    "title": "Substring Matching Pattern",
    "title_slug": "substring-matching-pattern",
    "difficulty": "Easy",
    "skills": [
      "String",
      "String Matching"
    ]
  },
  {
    "id": 3438,
    "title": "Find Valid Pair of Adjacent Digits in String",
    "title_slug": "find-valid-pair-of-adjacent-digits-in-string",
    "difficulty": "Easy",
    "skills": []
  }
]